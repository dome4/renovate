{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/fs/index.ts"],"names":[],"mappings":"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","sourcesContent":["import stream from 'stream';\nimport util from 'util';\nimport is from '@sindresorhus/is';\nimport findUp from 'find-up';\nimport fs from 'fs-extra';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\n\nexport * from './proxies';\n\nexport const pipeline = util.promisify(stream.pipeline);\n\nexport function getSubDirectory(fileName: string): string {\n  return upath.parse(fileName).dir;\n}\n\nexport function getSiblingFileName(\n  existingFileNameWithPath: string,\n  otherFileName: string\n): string {\n  const subDirectory = getSubDirectory(existingFileNameWithPath);\n  return upath.join(subDirectory, otherFileName);\n}\n\n// TODO: can return null #7154\nexport async function readLocalFile(fileName: string): Promise<Buffer>;\nexport async function readLocalFile(\n  fileName: string,\n  encoding: 'utf8'\n): Promise<string>;\nexport async function readLocalFile(\n  fileName: string,\n  encoding?: string\n): Promise<string | Buffer | null> {\n  const { localDir } = GlobalConfig.get();\n  const localFileName = upath.join(localDir, fileName);\n  try {\n    const fileContent = encoding\n      ? await fs.readFile(localFileName, encoding)\n      : await fs.readFile(localFileName);\n    return fileContent;\n  } catch (err) {\n    logger.trace({ err }, 'Error reading local file');\n    return null;\n  }\n}\n\nexport async function writeLocalFile(\n  fileName: string,\n  fileContent: string | Buffer\n): Promise<void> {\n  const { localDir } = GlobalConfig.get();\n  const localFileName = upath.join(localDir, fileName);\n  await fs.outputFile(localFileName, fileContent);\n}\n\nexport async function deleteLocalFile(fileName: string): Promise<void> {\n  const { localDir } = GlobalConfig.get();\n  if (localDir) {\n    const localFileName = upath.join(localDir, fileName);\n    await fs.remove(localFileName);\n  }\n}\n\n// istanbul ignore next\nexport async function renameLocalFile(\n  fromFile: string,\n  toFile: string\n): Promise<void> {\n  const { localDir } = GlobalConfig.get();\n  await fs.move(upath.join(localDir, fromFile), upath.join(localDir, toFile));\n}\n\n// istanbul ignore next\nexport async function ensureDir(dirName: string): Promise<void> {\n  if (is.nonEmptyString(dirName)) {\n    await fs.ensureDir(dirName);\n  }\n}\n\n// istanbul ignore next\nexport async function ensureLocalDir(dirName: string): Promise<void> {\n  const { localDir } = GlobalConfig.get();\n  const localDirName = upath.join(localDir, dirName);\n  await fs.ensureDir(localDirName);\n}\n\nexport async function ensureCacheDir(name: string): Promise<string> {\n  const cacheDirName = upath.join(\n    GlobalConfig.get('cacheDir'),\n    `others/${name}`\n  );\n  await fs.ensureDir(cacheDirName);\n  return cacheDirName;\n}\n\n/**\n * Return the path of the private cache directory. This directory is wiped\n * between repositories, so they can be used to store private registries' index\n * without risk of that information leaking to other repositories/users.\n */\nexport function privateCacheDir(): string {\n  const { cacheDir } = GlobalConfig.get();\n  return upath.join(cacheDir, '__renovate-private-cache');\n}\n\nexport function localPathExists(pathName: string): Promise<boolean> {\n  const { localDir } = GlobalConfig.get();\n  // Works for both files as well as directories\n  return fs\n    .stat(upath.join(localDir, pathName))\n    .then((s) => !!s)\n    .catch(() => false);\n}\n\n/**\n * Tries to find `otherFileName` in the directory where\n * `existingFileNameWithPath` is, then in its parent directory, then in the\n * grandparent, until we reach the top-level directory. All paths\n * must be relative to `localDir`.\n */\nexport async function findLocalSiblingOrParent(\n  existingFileNameWithPath: string,\n  otherFileName: string\n): Promise<string | null> {\n  if (upath.isAbsolute(existingFileNameWithPath)) {\n    return null;\n  }\n  if (upath.isAbsolute(otherFileName)) {\n    return null;\n  }\n\n  let current = existingFileNameWithPath;\n  while (current !== '') {\n    current = getSubDirectory(current);\n    const candidate = upath.join(current, otherFileName);\n    if (await localPathExists(candidate)) {\n      return candidate;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get files by name from directory\n */\nexport async function readLocalDirectory(path: string): Promise<string[]> {\n  const { localDir } = GlobalConfig.get();\n  const localPath = upath.join(localDir, path);\n  const fileList = await fs.readdir(localPath);\n  return fileList;\n}\n\nexport function createWriteStream(path: string): fs.WriteStream {\n  return fs.createWriteStream(path);\n}\n\nexport function localPathIsFile(pathName: string): Promise<boolean> {\n  const { localDir } = GlobalConfig.get();\n  return fs\n    .stat(upath.join(localDir, pathName))\n    .then((s) => s.isFile())\n    .catch(() => false);\n}\n\n/**\n * Find a file or directory by walking up parent directories within localDir\n */\n\nexport async function findUpLocal(\n  fileName: string | string[],\n  cwd: string\n): Promise<string | null> {\n  const { localDir } = GlobalConfig.get();\n  const absoluteCwd = upath.join(localDir, cwd);\n  const normalizedAbsoluteCwd = upath.normalizeSafe(absoluteCwd);\n  const res = await findUp(fileName, {\n    cwd: normalizedAbsoluteCwd,\n    type: 'file',\n  });\n  // Return null if nothing found\n  if (!is.nonEmptyString(res) || !is.nonEmptyString(localDir)) {\n    return null;\n  }\n  const safePath = upath.normalizeSafe(res);\n  // Return relative path if file is inside of local dir\n  if (safePath.startsWith(localDir)) {\n    let relativePath = safePath.replace(localDir, '');\n    if (relativePath.startsWith('/')) {\n      relativePath = relativePath.substring(1);\n    }\n    return relativePath;\n  }\n  // Return null if found file is outside of localDir\n  return null;\n}\n"]}