{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket-server/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// SEE for the reference https://github.com/renovatebot/renovate/blob/c3e9e572b225085448d94aa121c7ec81c14d3955/lib/platform/bitbucket/utils.js\nimport url from 'url';\nimport is from '@sindresorhus/is';\nimport { HostRule, PrState } from '../../../types';\nimport type { GitProtocol } from '../../../types/git';\nimport * as git from '../../../util/git';\nimport { BitbucketServerHttp } from '../../../util/http/bitbucket-server';\nimport type {\n  HttpOptions,\n  HttpPostOptions,\n  HttpResponse,\n} from '../../../util/http/types';\nimport { getPrBodyStruct } from '../pr-body';\nimport type { BbsPr, BbsRestPr, BbsRestRepo, BitbucketError } from './types';\n\nexport const BITBUCKET_INVALID_REVIEWERS_EXCEPTION =\n  'com.atlassian.bitbucket.pull.InvalidPullRequestReviewersException';\n\nconst bitbucketServerHttp = new BitbucketServerHttp();\n\n// https://docs.atlassian.com/bitbucket-server/rest/6.0.0/bitbucket-rest.html#idp250\nconst prStateMapping: any = {\n  MERGED: PrState.Merged,\n  DECLINED: PrState.Closed,\n  OPEN: PrState.Open,\n};\n\nexport function prInfo(pr: BbsRestPr): BbsPr {\n  return {\n    version: pr.version,\n    number: pr.id,\n    bodyStruct: getPrBodyStruct(pr.description),\n    sourceBranch: pr.fromRef.displayId,\n    targetBranch: pr.toRef.displayId,\n    title: pr.title,\n    state: prStateMapping[pr.state],\n    createdAt: pr.createdDate,\n  };\n}\n\nconst addMaxLength = (inputUrl: string, limit = 100): string => {\n  const { search, ...parsedUrl } = url.parse(inputUrl, true); // eslint-disable-line @typescript-eslint/no-unused-vars\n  const maxedUrl = url.format({\n    ...parsedUrl,\n    query: { ...parsedUrl.query, limit },\n  });\n  return maxedUrl;\n};\n\nfunction callApi<T>(\n  apiUrl: string,\n  method: string,\n  options?: HttpOptions | HttpPostOptions\n): Promise<HttpResponse<T>> {\n  /* istanbul ignore next */\n  switch (method.toLowerCase()) {\n    case 'post':\n      return bitbucketServerHttp.postJson<T>(\n        apiUrl,\n        options as HttpPostOptions\n      );\n    case 'put':\n      return bitbucketServerHttp.putJson<T>(apiUrl, options as HttpPostOptions);\n    case 'patch':\n      return bitbucketServerHttp.patchJson<T>(\n        apiUrl,\n        options as HttpPostOptions\n      );\n    case 'head':\n      return bitbucketServerHttp.headJson<T>(apiUrl, options);\n    case 'delete':\n      return bitbucketServerHttp.deleteJson<T>(\n        apiUrl,\n        options as HttpPostOptions\n      );\n    case 'get':\n    default:\n      return bitbucketServerHttp.getJson<T>(apiUrl, options);\n  }\n}\n\nexport async function accumulateValues<T = any>(\n  reqUrl: string,\n  method = 'get',\n  options?: HttpOptions | HttpPostOptions,\n  limit?: number\n): Promise<T[]> {\n  let accumulator: T[] = [];\n  let nextUrl = addMaxLength(reqUrl, limit);\n\n  while (typeof nextUrl !== 'undefined') {\n    // TODO: fix typing (#9610)\n    const { body } = await callApi<{\n      values: T[];\n      isLastPage: boolean;\n      nextPageStart: string;\n    }>(nextUrl, method, options);\n    accumulator = [...accumulator, ...body.values];\n    if (body.isLastPage !== false) {\n      break;\n    }\n\n    const { search, ...parsedUrl } = url.parse(nextUrl, true); // eslint-disable-line @typescript-eslint/no-unused-vars\n    nextUrl = url.format({\n      ...parsedUrl,\n      query: {\n        ...parsedUrl.query,\n        start: body.nextPageStart,\n      },\n    });\n  }\n\n  return accumulator;\n}\n\nexport interface BitbucketCommitStatus {\n  failed: number;\n  inProgress: number;\n  successful: number;\n}\n\nexport type BitbucketBranchState =\n  | 'SUCCESSFUL'\n  | 'FAILED'\n  | 'INPROGRESS'\n  | 'STOPPED';\n\nexport interface BitbucketStatus {\n  key: string;\n  state: BitbucketBranchState;\n}\n\nexport function isInvalidReviewersResponse(err: BitbucketError): boolean {\n  const errors = err?.response?.body?.errors ?? [];\n  return (\n    errors.length > 0 &&\n    errors.every(\n      (error) => error.exceptionName === BITBUCKET_INVALID_REVIEWERS_EXCEPTION\n    )\n  );\n}\n\nexport function getInvalidReviewers(err: BitbucketError): string[] {\n  const errors = err?.response?.body?.errors ?? [];\n  let invalidReviewers: string[] = [];\n  for (const error of errors) {\n    if (error.exceptionName === BITBUCKET_INVALID_REVIEWERS_EXCEPTION) {\n      invalidReviewers = invalidReviewers.concat(\n        error.reviewerErrors\n          ?.map(({ context }) => context)\n          .filter(is.nonEmptyString) ?? []\n      );\n    }\n  }\n\n  return invalidReviewers;\n}\n\nexport function getRepoGitUrl(\n  repository: string,\n  defaultEndpoint: string,\n  info: BbsRestRepo,\n  opts: HostRule\n): string {\n  let cloneUrl = info.links.clone?.find(({ name }) => name === 'http');\n  if (!cloneUrl) {\n    // Http access might be disabled, try to find ssh url in this case\n    cloneUrl = info.links.clone?.find(({ name }) => name === 'ssh');\n  }\n\n  let gitUrl: string;\n  if (!cloneUrl) {\n    // Fallback to generating the url if the API didn't give us an URL\n    const { host, pathname } = url.parse(defaultEndpoint);\n    gitUrl = git.getUrl({\n      protocol: defaultEndpoint.split(':')[0] as GitProtocol,\n      auth: `${opts.username}:${opts.password}`,\n      host: `${host}${pathname}${\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        pathname!.endsWith('/') ? '' : /* istanbul ignore next */ '/'\n      }scm`,\n      repository,\n    });\n  } else if (cloneUrl.name === 'http') {\n    // Inject auth into the API provided URL\n    const repoUrl = url.parse(cloneUrl.href);\n    repoUrl.auth = `${opts.username}:${opts.password}`;\n    gitUrl = url.format(repoUrl);\n  } else {\n    // SSH urls can be used directly\n    gitUrl = cloneUrl.href;\n  }\n  return gitUrl;\n}\n"]}