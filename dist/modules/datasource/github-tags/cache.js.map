{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/github-tags/cache.ts"],"names":[],"mappings":";;;AACA,oEAAoF;AAMpF,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCb,CAAC;AAwBF,MAAa,mBAAoB,SAAQ,0CAGxC;IAIC,YAAY,IAAgB,EAAE,OAAqB,EAAE;QACnD,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAJX,YAAO,GAAG,gCAAgC,CAAC;QAC3C,iBAAY,GAAG,KAAK,CAAC;IAI9B,CAAC;IAED,aAAa,CAAC,IAAgB;QAC5B,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QACjC,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC5B,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,MAAM,CAAC;YAC1C,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;SAC5C;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,EAAE;YAChC,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;YACjD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAtBD,kDAsBC","sourcesContent":["import type { GithubHttp } from '../../../util/http/github';\nimport { AbstractGithubDatasourceCache } from '../github-releases/cache/cache-base';\nimport type {\n  CacheOptions,\n  StoredItemBase,\n} from '../github-releases/cache/types';\n\nconst query = `\nquery ($owner: String!, $name: String!, $cursor: String, $count: Int!) {\n  repository(owner: $owner, name: $name) {\n    payload: refs(\n      first: $count\n      after: $cursor\n      orderBy: {field: TAG_COMMIT_DATE, direction: DESC}\n      refPrefix: \"refs/tags/\"\n    ) {\n      nodes {\n        version: name\n        target {\n          type: __typename\n          ... on Commit {\n            hash: oid\n            releaseTimestamp: committedDate\n          }\n          ... on Tag {\n            target {\n              ... on Commit {\n                hash: oid\n                releaseTimestamp: committedDate\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}\n`;\n\nexport interface FetchedTag {\n  version: string;\n  target:\n    | {\n        type: 'Commit';\n        hash: string;\n        releaseTimestamp: string;\n      }\n    | {\n        type: 'Tag';\n        target: {\n          hash: string;\n          releaseTimestamp: string;\n        };\n      };\n}\n\nexport interface StoredTag extends StoredItemBase {\n  hash: string;\n  releaseTimestamp: string;\n}\n\nexport class CacheableGithubTags extends AbstractGithubDatasourceCache<\n  StoredTag,\n  FetchedTag\n> {\n  readonly cacheNs = 'github-datasource-graphql-tags';\n  readonly graphqlQuery = query;\n\n  constructor(http: GithubHttp, opts: CacheOptions = {}) {\n    super(http, opts);\n  }\n\n  coerceFetched(item: FetchedTag): StoredTag | null {\n    const { version, target } = item;\n    if (target.type === 'Commit') {\n      const { hash, releaseTimestamp } = target;\n      return { version, hash, releaseTimestamp };\n    } else if (target.type === 'Tag') {\n      const { hash, releaseTimestamp } = target.target;\n      return { version, hash, releaseTimestamp };\n    }\n    return null;\n  }\n}\n"]}